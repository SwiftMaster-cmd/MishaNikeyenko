/* ====== JS/links.js (replace the whole file) ====== */
import { db, onUserReady } from './profile.js';
import {
  ref as dbRef,
  push,
  set,
  remove,
  update,
  onValue
} from 'https://www.gstatic.com/firebasejs/11.8.1/firebase-database.js';

/* ---------- helpers ---------- */
const groupLinksByCategory = data => {
  const grouped = {};
  Object.entries(data).forEach(([id, link]) => {
    const cat = (link.category || 'Uncategorized').trim();
    if (!grouped[cat]) grouped[cat] = [];
    grouped[cat].push({ id, ...link });
  });
  return grouped;
};

/* ---------- renderer ---------- */
function renderLinks(uid) {
  const container = document.getElementById('links-list');
  const linksRef  = dbRef(db, `users/${uid}/links`);

  onValue(linksRef, snap => {
    container.innerHTML = '';
    const data = snap.val();
    if (!data) {
      container.innerHTML = '<p style="opacity:.6">No links yet.</p>';
      return;
    }

    const grouped = groupLinksByCategory(data);

    /* one <section> per category  */
    Object.entries(grouped).forEach(([cat, links]) => {
      const section   = document.createElement('section');
      section.className = 'category-section';

      /* title-row */
      const title = document.createElement('div');
      title.className = 'category-title';
      title.innerHTML = `
        <span>${cat}</span>
        <button class="edit-cat-btn"  title="Rename"  data-category="${cat}">&#9998;</button>
        <button class="delete-cat-btn" title="Delete"  data-category="${cat}">&#128465;</button>
      `;
      section.appendChild(title);

      /* editable / deletable handlers */
      title.querySelector('.edit-cat-btn').onclick   = () => {
        const newName = prompt(`Rename "${cat}" to:`, cat);
        if (newName && newName !== cat) {
          links.forEach(l =>
            update(dbRef(db, `users/${uid}/links/${l.id}`), { category: newName })
          );
        }
      };
      title.querySelector('.delete-cat-btn').onclick = () => {
        if (confirm(`Delete "${cat}" and all its links?`)) {
          links.forEach(l => remove(dbRef(db, `users/${uid}/links/${l.id}`)));
        }
      };

      /* grid wrapper */
      const grid = document.createElement('div');
      grid.className = 'links-grid';
      section.appendChild(grid);
      container.appendChild(section);

      /* every link â†’ card in the grid */
      links.forEach(link => {
        const card = document.createElement('div');
        card.className = 'link-card';
        card.innerHTML = `
          <button class="link-main-btn" data-id="${link.id}">
            <span class="link-title">${link.title}</span>
            <span class="more-menu-btn" tabindex="0" data-id="${link.id}">&#8942;</span>
          </button>

          <div class="more-menu" id="menu-${link.id}" hidden>
            <div class="more-menu-content">
              <button class="delete-link-btn" data-id="${link.id}">Delete</button>
              <button class="edit-link-btn"   data-id="${link.id}">Edit</button>
              <div class="link-url-preview">${link.url}</div>
              <div class="link-cat-preview">Category: ${cat}</div>
            </div>
          </div>
        `;
        grid.appendChild(card);

        /* open link */
        card.querySelector('.link-main-btn').onclick = e => {
          if (!e.target.classList.contains('more-menu-btn')) {
            window.open(link.url, '_blank', 'noopener,noreferrer');
          }
        };

        /* pop-menu toggle */
        const btn  = card.querySelector('.more-menu-btn');
        const menu = card.querySelector('.more-menu');
        btn.onclick = e => {
          e.stopPropagation();
          const open = menu.hidden;
          document.querySelectorAll('.more-menu').forEach(m => (m.hidden = true));
          menu.hidden = !open;
        };
        document.addEventListener('mousedown', evt => {
          if (!menu.hidden && !menu.contains(evt.target) && evt.target !== btn) {
            menu.hidden = true;
          }
        });

        /* edit / delete inside menu */
        card.querySelector('.delete-link-btn').onclick = () =>
          remove(dbRef(db, `users/${uid}/links/${link.id}`));

        card.querySelector('.edit-link-btn').onclick = () => {
          const newTitle = prompt('Edit title:', link.title);
          const newURL   = prompt('Edit URL:',   link.url);
          const newCat   = prompt('Edit category:', cat);
          if (newTitle && newURL) {
            update(dbRef(db, `users/${uid}/links/${link.id}`),
              { title: newTitle, url: newURL, category: newCat });
          }
          menu.hidden = true;
        };
      });
    });
  });
}

/* ---------- add-form ---------- */
function setupAddLink(uid) {
  const form = document.getElementById('add-link-form');
  form.onsubmit = e => {
    e.preventDefault();
    const title = document.getElementById('link-title').value.trim();
    const url   = document.getElementById('link-url').value.trim();
    const cat   = (document.getElementById('link-category').value.trim() || 'Uncategorized');
    if (!title || !url) return;
    set(push(dbRef(db, `users/${uid}/links`)), { title, url, category: cat });
    form.reset();
  };
}

/* ---------- bootstrap ---------- */
onUserReady(user => {
  setupAddLink(user.uid);
  renderLinks(user.uid);
});